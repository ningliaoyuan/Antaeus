#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Antaeus.ORM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Antaeus_DB")]
	public partial class JB8ORMDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertID(ID instance);
    partial void UpdateID(ID instance);
    partial void DeleteID(ID instance);
    partial void InsertQB(QB instance);
    partial void UpdateQB(QB instance);
    partial void DeleteQB(QB instance);
    partial void InsertQD(QD instance);
    partial void UpdateQD(QD instance);
    partial void DeleteQD(QD instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertWiki(Wiki instance);
    partial void UpdateWiki(Wiki instance);
    partial void DeleteWiki(Wiki instance);
    partial void InsertWikiContent(WikiContent instance);
    partial void UpdateWikiContent(WikiContent instance);
    partial void DeleteWikiContent(WikiContent instance);
    partial void InsertRate(Rate instance);
    partial void UpdateRate(Rate instance);
    partial void DeleteRate(Rate instance);
    partial void InsertUserAnswerQB(UserAnswerQB instance);
    partial void UpdateUserAnswerQB(UserAnswerQB instance);
    partial void DeleteUserAnswerQB(UserAnswerQB instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    #endregion
		
		public JB8ORMDataContext() : 
				base(global::Antaeus.ORM.Properties.Settings.Default.Antaeus_DBConnectionString3, mappingSource)
		{
			OnCreated();
		}
		
		public JB8ORMDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JB8ORMDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JB8ORMDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JB8ORMDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ID> IDs
		{
			get
			{
				return this.GetTable<ID>();
			}
		}
		
		public System.Data.Linq.Table<QB> QBs
		{
			get
			{
				return this.GetTable<QB>();
			}
		}
		
		public System.Data.Linq.Table<QD> QDs
		{
			get
			{
				return this.GetTable<QD>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Wiki> Wikis
		{
			get
			{
				return this.GetTable<Wiki>();
			}
		}
		
		public System.Data.Linq.Table<WikiContent> WikiContents
		{
			get
			{
				return this.GetTable<WikiContent>();
			}
		}
		
		public System.Data.Linq.Table<Rate> Rates
		{
			get
			{
				return this.GetTable<Rate>();
			}
		}
		
		public System.Data.Linq.Table<UserAnswerQB> UserAnswerQBs
		{
			get
			{
				return this.GetTable<UserAnswerQB>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ID")]
	public partial class ID : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Key;
		
		private long _MaxID;
		
		private int _Cache;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnMaxIDChanging(long value);
    partial void OnMaxIDChanged();
    partial void OnCacheChanging(int value);
    partial void OnCacheChanged();
    #endregion
		
		public ID()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(500) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxID", DbType="BigInt NOT NULL")]
		public long MaxID
		{
			get
			{
				return this._MaxID;
			}
			set
			{
				if ((this._MaxID != value))
				{
					this.OnMaxIDChanging(value);
					this.SendPropertyChanging();
					this._MaxID = value;
					this.SendPropertyChanged("MaxID");
					this.OnMaxIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cache", DbType="Int NOT NULL")]
		public int Cache
		{
			get
			{
				return this._Cache;
			}
			set
			{
				if ((this._Cache != value))
				{
					this.OnCacheChanging(value);
					this.SendPropertyChanging();
					this._Cache = value;
					this.SendPropertyChanged("Cache");
					this.OnCacheChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QB")]
	public partial class QB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _QuestionID;
		
		private long _CategoryID;
		
		private string _Source;
		
		private string _CrUserName;
		
		private System.DateTime _CrTime;
		
		private string _Abstract;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIDChanging(long value);
    partial void OnQuestionIDChanged();
    partial void OnCategoryIDChanging(long value);
    partial void OnCategoryIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnCrUserNameChanging(string value);
    partial void OnCrUserNameChanged();
    partial void OnCrTimeChanging(System.DateTime value);
    partial void OnCrTimeChanged();
    partial void OnAbstractChanging(string value);
    partial void OnAbstractChanged();
    #endregion
		
		public QB()
		{
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="BigInt NOT NULL")]
		public long CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrUserName", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string CrUserName
		{
			get
			{
				return this._CrUserName;
			}
			set
			{
				if ((this._CrUserName != value))
				{
					this.OnCrUserNameChanging(value);
					this.SendPropertyChanging();
					this._CrUserName = value;
					this.SendPropertyChanged("CrUserName");
					this.OnCrUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrTime", DbType="DateTime NOT NULL")]
		public System.DateTime CrTime
		{
			get
			{
				return this._CrTime;
			}
			set
			{
				if ((this._CrTime != value))
				{
					this.OnCrTimeChanging(value);
					this.SendPropertyChanging();
					this._CrTime = value;
					this.SendPropertyChanged("CrTime");
					this.OnCrTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abstract", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Abstract
		{
			get
			{
				return this._Abstract;
			}
			set
			{
				if ((this._Abstract != value))
				{
					this.OnAbstractChanging(value);
					this.SendPropertyChanging();
					this._Abstract = value;
					this.SendPropertyChanged("Abstract");
					this.OnAbstractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_QB", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.QBs.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.QBs.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(long);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QD")]
	public partial class QD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _QuestionID;
		
		private string _SourceXml;
		
		private string _QuestionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIDChanging(long value);
    partial void OnQuestionIDChanged();
    partial void OnSourceXmlChanging(string value);
    partial void OnSourceXmlChanged();
    partial void OnQuestionTypeChanging(string value);
    partial void OnQuestionTypeChanged();
    #endregion
		
		public QD()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceXml", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string SourceXml
		{
			get
			{
				return this._SourceXml;
			}
			set
			{
				if ((this._SourceXml != value))
				{
					this.OnSourceXmlChanging(value);
					this.SendPropertyChanging();
					this._SourceXml = value;
					this.SendPropertyChanged("SourceXml");
					this.OnSourceXmlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string QuestionType
		{
			get
			{
				return this._QuestionType;
			}
			set
			{
				if ((this._QuestionType != value))
				{
					this.OnQuestionTypeChanging(value);
					this.SendPropertyChanging();
					this._QuestionType = value;
					this.SendPropertyChanged("QuestionType");
					this.OnQuestionTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RoleID;
		
		private string _Name;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(long value);
    partial void OnRoleIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _PasswordHash;
		
		private string _PasswordSalt;
		
		private string _DisplayName;
		
		private System.DateTime _CreatedTime;
		
		private bool _IsApproved;
		
		private string _Email;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnCreatedTimeChanging(System.DateTime value);
    partial void OnCreatedTimeChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public User()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(200) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedTime
		{
			get
			{
				return this._CreatedTime;
			}
			set
			{
				if ((this._CreatedTime != value))
				{
					this.OnCreatedTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedTime = value;
					this.SendPropertyChanged("CreatedTime");
					this.OnCreatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRoles", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserRoleID;
		
		private string _UserName;
		
		private long _RoleID;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserRoleIDChanging(long value);
    partial void OnUserRoleIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnRoleIDChanging(long value);
    partial void OnRoleIDChanged();
    #endregion
		
		public UserRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRoleID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long UserRoleID
		{
			get
			{
				return this._UserRoleID;
			}
			set
			{
				if ((this._UserRoleID != value))
				{
					this.OnUserRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserRoleID = value;
					this.SendPropertyChanged("UserRoleID");
					this.OnUserRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="BigInt NOT NULL")]
		public long RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(long);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CategoryID;
		
		private string _Name;
		
		private string _ShortName;
		
		private string _QuestionType;
		
		private string _QuestionTypeMeta;
		
		private EntitySet<QB> _QBs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(long value);
    partial void OnCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnQuestionTypeChanging(string value);
    partial void OnQuestionTypeChanged();
    partial void OnQuestionTypeMetaChanging(string value);
    partial void OnQuestionTypeMetaChanged();
    #endregion
		
		public Category()
		{
			this._QBs = new EntitySet<QB>(new Action<QB>(this.attach_QBs), new Action<QB>(this.detach_QBs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string QuestionType
		{
			get
			{
				return this._QuestionType;
			}
			set
			{
				if ((this._QuestionType != value))
				{
					this.OnQuestionTypeChanging(value);
					this.SendPropertyChanging();
					this._QuestionType = value;
					this.SendPropertyChanged("QuestionType");
					this.OnQuestionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionTypeMeta", DbType="NVarChar(3000)")]
		public string QuestionTypeMeta
		{
			get
			{
				return this._QuestionTypeMeta;
			}
			set
			{
				if ((this._QuestionTypeMeta != value))
				{
					this.OnQuestionTypeMetaChanging(value);
					this.SendPropertyChanging();
					this._QuestionTypeMeta = value;
					this.SendPropertyChanged("QuestionTypeMeta");
					this.OnQuestionTypeMetaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_QB", Storage="_QBs", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<QB> QBs
		{
			get
			{
				return this._QBs;
			}
			set
			{
				this._QBs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QBs(QB entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_QBs(QB entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Wiki")]
	public partial class Wiki : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _KID;
		
		private long _CurrentWikiContentID;
		
		private string _MaxReversion;
		
		private string _CrUserName;
		
		private System.DateTime _CreatedTime;
		
		private EntitySet<WikiContent> _WikiContents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKIDChanging(string value);
    partial void OnKIDChanged();
    partial void OnCurrentWikiContentIDChanging(long value);
    partial void OnCurrentWikiContentIDChanged();
    partial void OnMaxReversionChanging(string value);
    partial void OnMaxReversionChanged();
    partial void OnCrUserNameChanging(string value);
    partial void OnCrUserNameChanged();
    partial void OnCreatedTimeChanging(System.DateTime value);
    partial void OnCreatedTimeChanged();
    #endregion
		
		public Wiki()
		{
			this._WikiContents = new EntitySet<WikiContent>(new Action<WikiContent>(this.attach_WikiContents), new Action<WikiContent>(this.detach_WikiContents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KID", DbType="VarChar(600) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string KID
		{
			get
			{
				return this._KID;
			}
			set
			{
				if ((this._KID != value))
				{
					this.OnKIDChanging(value);
					this.SendPropertyChanging();
					this._KID = value;
					this.SendPropertyChanged("KID");
					this.OnKIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentWikiContentID", DbType="BigInt NOT NULL")]
		public long CurrentWikiContentID
		{
			get
			{
				return this._CurrentWikiContentID;
			}
			set
			{
				if ((this._CurrentWikiContentID != value))
				{
					this.OnCurrentWikiContentIDChanging(value);
					this.SendPropertyChanging();
					this._CurrentWikiContentID = value;
					this.SendPropertyChanged("CurrentWikiContentID");
					this.OnCurrentWikiContentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxReversion", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MaxReversion
		{
			get
			{
				return this._MaxReversion;
			}
			set
			{
				if ((this._MaxReversion != value))
				{
					this.OnMaxReversionChanging(value);
					this.SendPropertyChanging();
					this._MaxReversion = value;
					this.SendPropertyChanged("MaxReversion");
					this.OnMaxReversionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrUserName", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string CrUserName
		{
			get
			{
				return this._CrUserName;
			}
			set
			{
				if ((this._CrUserName != value))
				{
					this.OnCrUserNameChanging(value);
					this.SendPropertyChanging();
					this._CrUserName = value;
					this.SendPropertyChanged("CrUserName");
					this.OnCrUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedTime
		{
			get
			{
				return this._CreatedTime;
			}
			set
			{
				if ((this._CreatedTime != value))
				{
					this.OnCreatedTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedTime = value;
					this.SendPropertyChanged("CreatedTime");
					this.OnCreatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Wiki_WikiContent", Storage="_WikiContents", ThisKey="KID", OtherKey="KID")]
		public EntitySet<WikiContent> WikiContents
		{
			get
			{
				return this._WikiContents;
			}
			set
			{
				this._WikiContents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WikiContents(WikiContent entity)
		{
			this.SendPropertyChanging();
			entity.Wiki = this;
		}
		
		private void detach_WikiContents(WikiContent entity)
		{
			this.SendPropertyChanging();
			entity.Wiki = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WikiContent")]
	public partial class WikiContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _WikiContentID;
		
		private string _KID;
		
		private string _Content;
		
		private string _Reversion;
		
		private string _CrUserName;
		
		private System.DateTime _CreatedTime;
		
		private EntityRef<Wiki> _Wiki;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWikiContentIDChanging(long value);
    partial void OnWikiContentIDChanged();
    partial void OnKIDChanging(string value);
    partial void OnKIDChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnReversionChanging(string value);
    partial void OnReversionChanged();
    partial void OnCrUserNameChanging(string value);
    partial void OnCrUserNameChanged();
    partial void OnCreatedTimeChanging(System.DateTime value);
    partial void OnCreatedTimeChanged();
    #endregion
		
		public WikiContent()
		{
			this._Wiki = default(EntityRef<Wiki>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WikiContentID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long WikiContentID
		{
			get
			{
				return this._WikiContentID;
			}
			set
			{
				if ((this._WikiContentID != value))
				{
					this.OnWikiContentIDChanging(value);
					this.SendPropertyChanging();
					this._WikiContentID = value;
					this.SendPropertyChanged("WikiContentID");
					this.OnWikiContentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KID", DbType="VarChar(600) NOT NULL", CanBeNull=false)]
		public string KID
		{
			get
			{
				return this._KID;
			}
			set
			{
				if ((this._KID != value))
				{
					if (this._Wiki.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKIDChanging(value);
					this.SendPropertyChanging();
					this._KID = value;
					this.SendPropertyChanged("KID");
					this.OnKIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reversion", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Reversion
		{
			get
			{
				return this._Reversion;
			}
			set
			{
				if ((this._Reversion != value))
				{
					this.OnReversionChanging(value);
					this.SendPropertyChanging();
					this._Reversion = value;
					this.SendPropertyChanged("Reversion");
					this.OnReversionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrUserName", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string CrUserName
		{
			get
			{
				return this._CrUserName;
			}
			set
			{
				if ((this._CrUserName != value))
				{
					this.OnCrUserNameChanging(value);
					this.SendPropertyChanging();
					this._CrUserName = value;
					this.SendPropertyChanged("CrUserName");
					this.OnCrUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedTime
		{
			get
			{
				return this._CreatedTime;
			}
			set
			{
				if ((this._CreatedTime != value))
				{
					this.OnCreatedTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedTime = value;
					this.SendPropertyChanged("CreatedTime");
					this.OnCreatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Wiki_WikiContent", Storage="_Wiki", ThisKey="KID", OtherKey="KID", IsForeignKey=true)]
		public Wiki Wiki
		{
			get
			{
				return this._Wiki.Entity;
			}
			set
			{
				Wiki previousValue = this._Wiki.Entity;
				if (((previousValue != value) 
							|| (this._Wiki.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Wiki.Entity = null;
						previousValue.WikiContents.Remove(this);
					}
					this._Wiki.Entity = value;
					if ((value != null))
					{
						value.WikiContents.Add(this);
						this._KID = value.KID;
					}
					else
					{
						this._KID = default(string);
					}
					this.SendPropertyChanged("Wiki");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rate")]
	public partial class Rate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RateID;
		
		private string _KID;
		
		private int _Score;
		
		private string _CrUserName;
		
		private System.DateTime _CreatedTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRateIDChanging(long value);
    partial void OnRateIDChanged();
    partial void OnKIDChanging(string value);
    partial void OnKIDChanged();
    partial void OnScoreChanging(int value);
    partial void OnScoreChanged();
    partial void OnCrUserNameChanging(string value);
    partial void OnCrUserNameChanged();
    partial void OnCreatedTimeChanging(System.DateTime value);
    partial void OnCreatedTimeChanged();
    #endregion
		
		public Rate()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long RateID
		{
			get
			{
				return this._RateID;
			}
			set
			{
				if ((this._RateID != value))
				{
					this.OnRateIDChanging(value);
					this.SendPropertyChanging();
					this._RateID = value;
					this.SendPropertyChanged("RateID");
					this.OnRateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KID", DbType="VarChar(600) NOT NULL", CanBeNull=false)]
		public string KID
		{
			get
			{
				return this._KID;
			}
			set
			{
				if ((this._KID != value))
				{
					this.OnKIDChanging(value);
					this.SendPropertyChanging();
					this._KID = value;
					this.SendPropertyChanged("KID");
					this.OnKIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrUserName", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string CrUserName
		{
			get
			{
				return this._CrUserName;
			}
			set
			{
				if ((this._CrUserName != value))
				{
					this.OnCrUserNameChanging(value);
					this.SendPropertyChanging();
					this._CrUserName = value;
					this.SendPropertyChanged("CrUserName");
					this.OnCrUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedTime
		{
			get
			{
				return this._CreatedTime;
			}
			set
			{
				if ((this._CreatedTime != value))
				{
					this.OnCreatedTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedTime = value;
					this.SendPropertyChanged("CreatedTime");
					this.OnCreatedTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAnswerQB")]
	public partial class UserAnswerQB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserAnswerQBID;
		
		private long _QuestionID;
		
		private string _Answer;
		
		private int _Cost;
		
		private bool _Correct;
		
		private string _CrUserName;
		
		private System.DateTime _CrTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserAnswerQBIDChanging(long value);
    partial void OnUserAnswerQBIDChanged();
    partial void OnQuestionIDChanging(long value);
    partial void OnQuestionIDChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnCostChanging(int value);
    partial void OnCostChanged();
    partial void OnCorrectChanging(bool value);
    partial void OnCorrectChanged();
    partial void OnCrUserNameChanging(string value);
    partial void OnCrUserNameChanged();
    partial void OnCrTimeChanging(System.DateTime value);
    partial void OnCrTimeChanged();
    #endregion
		
		public UserAnswerQB()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAnswerQBID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long UserAnswerQBID
		{
			get
			{
				return this._UserAnswerQBID;
			}
			set
			{
				if ((this._UserAnswerQBID != value))
				{
					this.OnUserAnswerQBIDChanging(value);
					this.SendPropertyChanging();
					this._UserAnswerQBID = value;
					this.SendPropertyChanged("UserAnswerQBID");
					this.OnUserAnswerQBIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="BigInt NOT NULL")]
		public long QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Int NOT NULL")]
		public int Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Correct", DbType="Bit NOT NULL")]
		public bool Correct
		{
			get
			{
				return this._Correct;
			}
			set
			{
				if ((this._Correct != value))
				{
					this.OnCorrectChanging(value);
					this.SendPropertyChanging();
					this._Correct = value;
					this.SendPropertyChanged("Correct");
					this.OnCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrUserName", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string CrUserName
		{
			get
			{
				return this._CrUserName;
			}
			set
			{
				if ((this._CrUserName != value))
				{
					this.OnCrUserNameChanging(value);
					this.SendPropertyChanging();
					this._CrUserName = value;
					this.SendPropertyChanged("CrUserName");
					this.OnCrUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrTime", DbType="DateTime NOT NULL")]
		public System.DateTime CrTime
		{
			get
			{
				return this._CrTime;
			}
			set
			{
				if ((this._CrTime != value))
				{
					this.OnCrTimeChanging(value);
					this.SendPropertyChanging();
					this._CrTime = value;
					this.SendPropertyChanged("CrTime");
					this.OnCrTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CommentID;
		
		private string _KID;
		
		private string _Content;
		
		private int _Floor;
		
		private string _ParentCID;
		
		private string _CrUserName;
		
		private System.DateTime _CreatedTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIDChanging(long value);
    partial void OnCommentIDChanged();
    partial void OnKIDChanging(string value);
    partial void OnKIDChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnFloorChanging(int value);
    partial void OnFloorChanged();
    partial void OnParentCIDChanging(string value);
    partial void OnParentCIDChanged();
    partial void OnCrUserNameChanging(string value);
    partial void OnCrUserNameChanged();
    partial void OnCreatedTimeChanging(System.DateTime value);
    partial void OnCreatedTimeChanged();
    #endregion
		
		public Comment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KID", DbType="VarChar(600) NOT NULL", CanBeNull=false)]
		public string KID
		{
			get
			{
				return this._KID;
			}
			set
			{
				if ((this._KID != value))
				{
					this.OnKIDChanging(value);
					this.SendPropertyChanging();
					this._KID = value;
					this.SendPropertyChanged("KID");
					this.OnKIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floor", DbType="Int NOT NULL")]
		public int Floor
		{
			get
			{
				return this._Floor;
			}
			set
			{
				if ((this._Floor != value))
				{
					this.OnFloorChanging(value);
					this.SendPropertyChanging();
					this._Floor = value;
					this.SendPropertyChanged("Floor");
					this.OnFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCID", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string ParentCID
		{
			get
			{
				return this._ParentCID;
			}
			set
			{
				if ((this._ParentCID != value))
				{
					this.OnParentCIDChanging(value);
					this.SendPropertyChanging();
					this._ParentCID = value;
					this.SendPropertyChanged("ParentCID");
					this.OnParentCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrUserName", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string CrUserName
		{
			get
			{
				return this._CrUserName;
			}
			set
			{
				if ((this._CrUserName != value))
				{
					this.OnCrUserNameChanging(value);
					this.SendPropertyChanging();
					this._CrUserName = value;
					this.SendPropertyChanged("CrUserName");
					this.OnCrUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedTime
		{
			get
			{
				return this._CreatedTime;
			}
			set
			{
				if ((this._CreatedTime != value))
				{
					this.OnCreatedTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedTime = value;
					this.SendPropertyChanged("CreatedTime");
					this.OnCreatedTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tag")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TagID;
		
		private string _KID;
		
		private string _CrUserName;
		
		private System.DateTime _CreatedTime;
		
		private string _Tags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIDChanging(long value);
    partial void OnTagIDChanged();
    partial void OnKIDChanging(string value);
    partial void OnKIDChanged();
    partial void OnCrUserNameChanging(string value);
    partial void OnCrUserNameChanged();
    partial void OnCreatedTimeChanging(System.DateTime value);
    partial void OnCreatedTimeChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    #endregion
		
		public Tag()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KID", DbType="VarChar(600) NOT NULL", CanBeNull=false)]
		public string KID
		{
			get
			{
				return this._KID;
			}
			set
			{
				if ((this._KID != value))
				{
					this.OnKIDChanging(value);
					this.SendPropertyChanging();
					this._KID = value;
					this.SendPropertyChanged("KID");
					this.OnKIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrUserName", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string CrUserName
		{
			get
			{
				return this._CrUserName;
			}
			set
			{
				if ((this._CrUserName != value))
				{
					this.OnCrUserNameChanging(value);
					this.SendPropertyChanging();
					this._CrUserName = value;
					this.SendPropertyChanged("CrUserName");
					this.OnCrUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedTime
		{
			get
			{
				return this._CreatedTime;
			}
			set
			{
				if ((this._CreatedTime != value))
				{
					this.OnCreatedTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedTime = value;
					this.SendPropertyChanged("CreatedTime");
					this.OnCreatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="VarChar(600) NOT NULL", CanBeNull=false)]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
